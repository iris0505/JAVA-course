// Суперкласс
class Animal {
    // Переопределяемый метод
    public void makeSound() {
        System.out.println("Животное издает звук");
    }

    // Метод с возвращаемым значением
    public String getType() {
        return "Животное";
    }
}

// Подкласс
class Dog extends Animal {
    // Переопределение метода makeSound
    @Override
    public void makeSound() {
        System.out.println("Гав!");
    }

    // Переопределение метода getType с другим типом возвращаемого значения
    /*
    @Override
    public int getType() { // Это вызовет ошибку компиляции
        return 1; // Ошибка: тип возвращаемого значения не совпадает
    }
    */
    
    // Правильное переопределение метода getType
    @Override
    public String getType() {
        return "Собака";
    }
}

// Класс с перегруженными методами
class Calculator {
    // Перегруженный метод для сложения двух целых чисел
    public int add(int a, int b) {
        return a + b;
    }

    // Перегруженный метод для сложения трех целых чисел
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Перегруженный метод для сложения двух чисел с плавающей запятой
    public double add(double a, double b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        // Пример использования перегруженных методов
        Calculator calculator = new Calculator();
        System.out.println("Сумма двух целых чисел: " + calculator.add(5, 10)); // Вызов метода add(int, int)
        System.out.println("Сумма трех целых чисел: " + calculator.add(5, 10, 15)); // Вызов метода add(int, int, int)
        System.out.println("Сумма двух чисел с плавающей запятой: " + calculator.add(5.5, 10.5)); // Вызов метода add(double, double)

        // Пример использования переопределенных методов
        Animal myDog = new Dog();
        myDog.makeSound(); // Вызов переопределенного метода
        System.out.println("Тип: " + myDog.getType()); // Вызов переопределенного метода

        // Пример использования аннотации @Override
        // Если бы мы раскомментировали неправильное переопределение метода getType() в классе Dog,
        // компилятор выдал бы ошибку, указывая, что тип возвращаемого значения не совпадает.
    }
}
